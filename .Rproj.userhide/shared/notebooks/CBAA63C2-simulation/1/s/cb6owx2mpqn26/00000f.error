{"frames":[{"func":"furrr::future_map_dfr(data_list, ~weighted_Bayes_f(.x, dd), .progress = TRUE, \n    .options = furrr_options(seed = 123))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"future_map(.x = .x, .f = .f, ..., .options = .options, .env_globals = .env_globals, \n    .progress = .progress)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"furrr_map_template(x = .x, fn = .f, dots = list(...), options = .options, \n    progress = .progress, type = \"list\", map_fn = purrr::map, \n    env_globals = .env_globals)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"furrr_template(args = x, fn = fn, dots = dots, n = n, options = options, \n    progress = progress, type = type, map_fn = map_fn, names = names, \n    env_globals = env_globals, expr = expr, extract = furrr_map_extract)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"future::future(expr, substitute = FALSE, envir = env_globals, \n    stdout = options$stdout, conditions = options$conditions, \n    globals = chunk_globals, packages = chunk_packages, seed = options$seed, \n    label = labels[[i]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"run(future)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"run.Future(future)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"run(future)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"run.ClusterFuture(future)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"cluster_call(cl, fun = grmall, future = future, when = \"call grmall() on\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch({\n    clusterCall(cl = cl, ...)\n}, error = function(ex) {\n    msg <- post_mortem_cluster_failure(ex, when = when, node = node,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"clusterCall(cl = cl, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"checkForRemoteErrors(lapply(cl, recvResult))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(cl, recvResult)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recvData(con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recvData.SOCK0node(con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"unserialize(node$con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"no loop for break/next, jumping to top level"}